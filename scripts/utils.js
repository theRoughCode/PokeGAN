const flatten = (arr) => {
  const res = [];
  for (let x = 0; x < arr.length; x++) {
    const row = arr[x];
    for (let y = 0; y < row.length; y++) {
      const rgb = row[y];
      res.push(...rgb);
      res.push(255);
    }
  }
  return res;
};

const imageToURL = (rgbArr) => {
  const canvas = document.createElement("canvas");
  canvas.width = WIDTH;
  canvas.height = HEIGHT;
  const ctx = canvas.getContext("2d");
  const imageData = new ImageData(WIDTH, HEIGHT);
  for (let i = 0; i < rgbArr.length; i++) {
    imageData.data[i] = rgbArr[i];
  }
  ctx.putImageData(imageData, 0, 0);
  return canvas.toDataURL();
}

const addText = (image, text) => {
  const padding = 2;
  const imageWidth = 256;
  const textBoxHeight = 44;
  const watermarkHeight = 25;
  const canvas = document.createElement("canvas");
  canvas.width = 256;
  canvas.height = imageWidth + textBoxHeight + watermarkHeight;
  const ctx = canvas.getContext("2d");
  ctx.imageSmoothingEnabled = false;

  // Fill background white
  ctx.beginPath();
  ctx.rect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = 'white';
  ctx.fill();

  // Draw image
  ctx.drawImage(image, 0, 0, WIDTH, HEIGHT, 0, 0, 256, 256);

  // Calculate font size to fit image
  let fontSize = 40;
  do {
    fontSize--;
    ctx.font = `${fontSize}px helvetica`;
  } while (ctx.measureText(text).width > canvas.width - padding * 2);
  // Centre text
  const measure = ctx.measureText(text);
  const txtWidth = measure.width;
  const txtHeight = measure.actualBoundingBoxAscent;
  ctx.fillStyle = 'black';
  ctx.fillText(text, canvas.width / 2 - txtWidth / 2, canvas.width + textBoxHeight / 2 + txtHeight / 2 - padding, canvas.width);

  // Add URL watermark
  ctx.font = '10px helvetica';
  const watermarkText = 'Generated by: https://www.raphaelkoh.me/PokeGAN';
  ctx.fillText(watermarkText, 5, 320, canvas.width);

  return {
    dataURL: canvas.toDataURL(),
    width: canvas.width,
    height: canvas.height
  };
}

const loadImageData = (rgbArr) => {
  const imgEl = document.getElementById("poke-img");
  imgEl.src = imageToURL(rgbArr);
  $('#info').fadeOut(400);
  setTimeout(() => $('#image-card').fadeIn(400), 400);
};

const generateShareImage = (name) => new Promise((resolve, reject) =>{
  const imgEl = document.getElementById("poke-img");
  const imageObj = new Image();
  imageObj.onload = function() {
    const { dataURL, width, height } = addText(imageObj, name);
    resolve({ dataURL, width, height });
  };
  imageObj.onerror = reject;
  imageObj.src = imgEl.src;
});

const dataURLtoFile = (dataURL, filename) => {
  const arr = dataURL.split(','),
        mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--){
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new File([u8arr], filename, {type:mime});
}

const openImageInNewTab = (dataURL, width, height) => {
  const img = new Image();
  img.width = width;
  img.height = height;
  img.src = dataURL;
  const newTab = window.open();
  newTab.document.write(img.outerHTML);
  newTab.document.close();
}

const numToAlpha = (num) => {
  if (num === 1) return "$";
  if (num >= 1) throw Error("Invalid number!");
  // Remove decimal point
  num = num.toString().slice(2);
  // Remove leading zeros
  let num2 = parseInt(num);
  // Count leading zeros
  const numZeros = num.length - num2.toString().length;
  let str = `${numZeros}_`;
  while (num2 > 0) {
    const rem = num2 % 36;
    const alpha = rem.toString(36);
    num2 = Math.floor(num2 / 36);
    str += alpha;
  }
  return str;
};

const alphaToNum = (str) => {
  if (str === "$") return 1;
  // Get leading zeros
  let [numZeros, numStr] = str.split("_");
  let num = 0;
  for (let i = numStr.length - 1; i >= 0; i--) {
    const alpha = numStr[i];
    const rem = parseInt(alpha, 36);
    num = num * 36 + rem;
  }
  // Add decimal point
  num = "0." + "0".repeat(numZeros) + num.toString();
  num = parseFloat(num);
  return num;
};

const encodeTensor = (tensor) => {
  let arr = tensor.dataSync();
  // Convert to alpabet
  arr = Array.from(arr).map(numToAlpha);
  const str = arr.join("-");
  return str;
};

const decodeStr = (str) => {
  let arr = str.split("-");
  arr = arr.map(alphaToNum);
  const tensor = tf.tensor(arr, [1, arr.length], "float32");
  return tensor;
};
